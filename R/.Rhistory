source('C:/Users/wangjq/Desktop/Research/plot_for_comparison.R')
data1 <- data.frame(names = names, LD = LD, GWASH = MomentEsti)
h1 <- barplot(as.matrix(t(data1[,c(2,3)])),beside = TRUE,names.arg = data1$names,
col = c("lightcyan", "lavender"),
legend =c("LD","GWASH"), ylim = c(0,1),
main = "", font.main = 4,
sub = "", col.sub = mybarcol,axes = T,
cex.names = 0.8, las=2)
axis(side = 3,pos = 0, at = h1,labels = data1$names)
h1 <- barplot(as.matrix(t(data1[,c(2,3)])),beside = TRUE,names.arg = data1$names,
col = c("lightcyan", "lavender"),
legend =c("LD","GWASH"), ylim = c(0,1),
main = "", font.main = 4,
sub = "", col.sub = mybarcol,axes = T,
cex.names = 0.8, las=2)
axis(side = 3,pos = 0, at = h1)
View(h1)
h1 <- barplot(as.matrix(t(data1[,c(2,3)])),beside = TRUE,names.arg = data1$names,
col = c("lightcyan", "lavender"),
legend =c("LD","GWASH"), ylim = c(0,1),
main = "", font.main = 4,
sub = "", col.sub = mybarcol,axes = T,
cex.names = 0.8, las=2)
axis(side = 3,pos = 0, at =2:10, labels =  data1$names)
View(h1)
source('C:/Users/wangjq/Desktop/Research/plot_for_comparison.R')
axis(side = 4,pos = 0, at =(3*(1:10) -1), labels =  data1$names)
axis(side = 2,pos = 0, at =(3*(1:10) -1), labels =  data1$names)
data1 <- data.frame(names = names, LD = LD, GWASH = MomentEsti)
h1 <- barplot(as.matrix(t(data1[,c(2,3)])),beside = TRUE,
col = c("lightcyan", "lavender"),
legend =c("LD","GWASH"), ylim = c(0,1),
main = "", font.main = 4,
sub = "", col.sub = mybarcol,axes = T,
cex.names = 0.8, las=2)
axis(side = 2,pos = 0, at =(3*(1:10) -1), labels =  data1$names)
axis(side = 3,pos = 0, at =(3*(1:10) -1), labels =  data1$names)
axis(side = 3,pos = 1, at =(3*(1:10) -1), labels =  data1$names)
axis(side = 3,pos = 1, at =(3*(1:10) -1), labels =  data1$names,tick = F, lwd = 0.5,las = 2)
data1 <- data.frame(names = names, LD = LD, GWASH = MomentEsti)
h1 <- barplot(as.matrix(t(data1[,c(2,3)])),beside = TRUE,
col = c("lightcyan", "lavender"),
legend =c("LD","GWASH"), ylim = c(0,1),
main = "", font.main = 4,
sub = "", col.sub = mybarcol,axes = T,
cex.names = 0.8, las=2)
axis(side = 3,pos = 1, at =(3*(1:10) -1), labels =  data1$names,tick = F, lwd = 0.5,las = 2)
axis(side = 3,pos = -0.1, at =(3*(1:10) -1), labels =  data1$names,tick = F, lwd = 0.5,las = 2)
axis(side = 3,pos = -1, at =(3*(1:10) -1), labels =  data1$names,tick = F, lwd = 0.5,las = 2)
axis(side = 3,pos = -0.5, at =(3*(1:10) -1), labels =  data1$names,tick = F, lwd = 0.5,las = 2)
source('C:/Users/wangjq/Desktop/Research/plot_for_comparison.R')
source('C:/Users/wangjq/Desktop/Research/plot_for_comparison.R')
source('C:/Users/wangjq/Desktop/Research/plot_for_comparison.R')
source('C:/Users/wangjq/Desktop/Research/plot_for_comparison.R')
source('C:/Users/wangjq/Desktop/Code/True_D_Simulation_validation.R')
rm(list = ls())
source('Simulation_D_discrete.R') # simulation function for low prevalence scenerio
source('C:/Users/wangjq/Desktop/Code/Simulation_D_discrete.R')
source('Simulation_D_discrete_High_Prev.R') # simulation function for high prevalence scenerio
getwd(0)
getwd()
setwd(../Desktop/)
source('C:/Users/wangjq/Desktop/Code/Simulation_D_discrete.R')
source('C:/Users/wangjq/Desktop/Code/Simulation_D_discrete_High_Prev.R')
library(ggplot2)
library(directlabels)
library(Cairo)
expit= function(x){
return(exp(x)/(1+exp(x)))
}
alpha1 <- c(seq(0.4,1.4,0.1),seq(1.5,4.6,0.2))
alpha2 <- c(seq(0.4,1.4,0.1),seq(1.5,4.6,0.2))
result <- vector()
for(i in 1:length(alpha1)){
for(j in 1:length(alpha2)){
a <- Sys.time()
result <- c(result,Low_Pre_Simu2(alpha1[i],alpha2[j],SE_E0 = 0.8, SP_E0 = 0.9))
b<- Sys.time()
print(b-a)
}
}
PlotData1 <- data.frame(alpha1 = rep(alpha1,each = length(alpha2)),alpha2 = rep(alpha2,times = length(alpha1)),result = result)
PlotData1$Sp <- expit(PlotData1$alpha1)
PlotData1$Se <- expit(PlotData1$alpha2)
save(PlotData1,file = 'PlotData_Low_Prev_1_True')
alpha1 <- c(seq(0.4,2.2,0.1),seq(2.25,3,0.05),seq(3.2,4.6,0.2))
alpha2 <- c(seq(0.4,1.4,0.1),seq(1.5,4.6,0.2))
result <- vector()
for(i in 1:length(alpha1)){
for(j in 1:length(alpha2)){
a <- Sys.time()
result <- c(result,Low_Pre_Simu2(alpha1[i],alpha2[j],SE_E0 = 0.7, SP_E0 = 0.95))
b<- Sys.time()
print(b-a)
}
}
PlotData <- data.frame(alpha1 = rep(alpha1,each = length(alpha2)),alpha2 = rep(alpha2,times = length(alpha1)),result = result)
expit= function(x){
return(exp(x)/(1+exp(x)))
}
# figure 1.1
alpha1 <- c(seq(0.4,1.4,0.1),seq(1.5,4.6,0.2))
alpha2 <- c(seq(0.4,1.4,0.1),seq(1.5,4.6,0.2))
result <- vector()
for(i in 1:length(alpha1)){
for(j in 1:length(alpha2)){
a <- Sys.time()
result <- c(result,Low_Pre_Simu_True(alpha1[i],alpha2[j],SE_E0 = 0.8, SP_E0 = 0.9))
b<- Sys.time()
print(b-a)
}
}
PlotData1 <- data.frame(alpha1 = rep(alpha1,each = length(alpha2)),alpha2 = rep(alpha2,times = length(alpha1)),result = result)
PlotData1$Sp <- expit(PlotData1$alpha1)
PlotData1$Se <- expit(PlotData1$alpha2)
save(PlotData1,file = 'PlotData_Low_Prev_1_True')
##### figure 1.2
alpha1 <- c(seq(0.4,2.2,0.1),seq(2.25,3,0.05),seq(3.2,4.6,0.2))
alpha2 <- c(seq(0.4,1.4,0.1),seq(1.5,4.6,0.2))
result <- vector()
for(i in 1:length(alpha1)){
for(j in 1:length(alpha2)){
a <- Sys.time()
result <- c(result,Low_Pre_Simu_True(alpha1[i],alpha2[j],SE_E0 = 0.7, SP_E0 = 0.95))
b<- Sys.time()
print(b-a)
}
}
PlotData <- data.frame(alpha1 = rep(alpha1,each = length(alpha2)),alpha2 = rep(alpha2,times = length(alpha1)),result = result)
PlotData$Sp <- expit(PlotData$alpha1)
PlotData$Se <- expit(PlotData$alpha2)
save(PlotData,file = 'PlotData_Low_Prev_2_True')
# figure 2.1
alpha1 <- c(seq(0.4,1.4,0.1),seq(1.5,4.6,0.2))
alpha2 <- c(seq(0.4,1.4,0.1),seq(1.5,4.6,0.2))
result <- vector()
for(i in 1:length(alpha1)){
for(j in 1:length(alpha2)){
a <- Sys.time()
result <- c(result,High_Pre_Simu_True(alpha1[i],alpha2[j],SE_E0 = 0.8, SP_E0 = 0.9))
b<- Sys.time()
print(b-a)
}
}
PlotData <- data.frame(alpha1 = rep(alpha1,each = length(alpha2)),alpha2 = rep(alpha2,times = length(alpha1)),result = result)
PlotData$Sp <- expit(PlotData$alpha1)
PlotData$Se <- expit(PlotData$alpha2)
save(PlotData,file = 'contour_High_Prev_1_True.Rda')
# figure 2.2
alpha1 <- c(seq(0.4,2.2,0.1),seq(2.25,3,0.05),seq(3.2,4.6,0.2))
alpha2 <- c(seq(0.4,1.4,0.1),seq(1.5,4.6,0.2))
result <- vector()
for(i in 1:length(alpha1)){
for(j in 1:length(alpha2)){
a <- Sys.time()
result <- c(result,High_Pre_Simu_True(alpha1[i],alpha2[j],SE_E0 = 0.7, SP_E0 = 0.95))
b<- Sys.time()
print(b-a)
}
}
PlotData <- data.frame(alpha1 = rep(alpha1,each = length(alpha2)),alpha2 = rep(alpha2,times = length(alpha1)),result = result)
PlotData$Sp <- expit(PlotData$alpha1)
PlotData$Se <- expit(PlotData$alpha2)
save(PlotData,file = 'contour_High_Prev_2_True.Rda')
View(PlotData)
source('P:/CoheritabilitySimulation6.29/Beta-Diagonal/CoheritabilityNeuman_s4.R')
Sigma = rho^abs(outer(1:m, 1:m, "-")) #correlation matrix
t(beta_mg)%*% solve(Sigma) %*%  gamma_mg
t(Beta)%*% solve(sigma) %*%  Gamma1
t(Beta)%*% solve(Sigma) %*%  Gamma1
t(Beta)%*% solve(SIGMA) %*%  Gamma1
t(Beta)%*% (SIGMA) %*%  Gamma1
source('P:/CoheritabilitySimulation6.29/Beta-Diagonal/CoheritabilityNeuman_s4.R')
t(beta_mg)%*% solve(Sigma) %*%  gamma_mg
t(Beta)%*%SIGMA%*%Beta)
t(Beta)%*%SIGMA%*%Beta
(t(Beta) %*% SIGMA %*% SIGMA %*% Beta)^2 * (t(Beta) %*% Beta) / (t(Beta) %*% SIGMA %*% SIGMA %*% SIGMA %*% Beta)
sqrt((t(Beta) %*% SIGMA %*% SIGMA %*% Beta)^2 * (t(Beta) %*% Beta) / (t(Beta) %*% SIGMA %*% SIGMA %*% SIGMA %*% Beta))
t(Beta)%*%SIGMA%*%Beta)
t(Beta)%*%SIGMA%*%Beta
t(Beta.mg)%*%Sigma%*%Beta.mg
t(Beta.mg)%*% solve( Sigma) %*%Beta.mg
GeCr = 0.2 #denominator
h2.X = 0.32
h2.Z = 0.5
count = 500 # Control the genetic relatedness
P = 1000 #number of SNP
n = 500  #number of subject
nsim = 100  #number of dataset simulated, if nsim=1, only 1 dataset is generated
m = P
d = P
b.dist=1; #1: beta is from N(0,1); 2:beta is the mixture of N(0,1) and 0's
X.norm = T; #X.norm=T if X is normal distribution; X.norm = F if X is binomial distribution.
Z.norm = T
n.subdiag=3; #equivalent to q in Table 1; for example, when rho=0.2, n.subdiag=3 (see paper Table 1 )
res = vector()
rho = 0.6
if(!X.norm){ #if X is binomial,
p=0.1;q=1-p; #binomial success and failure rates, could be other values;
rep.num=10; #for obtaining covariance matrix;
}
if(b.dist==2){ #if beta is mixed
null.b.prop=0.9; #90% of beta are 0, the other 10% beta are from N(0,1)
}
bsigma = fdiag(mat, m/2)
Beta = t(rmvnorm(1,mean = rep(0,m), sigma = as.matrix(bsigma)))
SIGMA <- Sigma1(m,rho)
Beta = Beta * c(sqrt(h2.X)/sqrt(t(Beta)%*%SIGMA%*%Beta))
sigma2.eps.X =1 - h2.X
U <- SIGMA %*% Beta
temp <- c(round(rnorm(P - P/2,0,1),2))
Z = -t(temp)%*%U[1:(P/2)]/(P/2)
V1 <- c(temp, Z/U[(P/2 + 1):length(U)])
V1 = V1*sqrt(h2.X)/sqrt(t(V1)%*%SIGMA%*%V1) # normalize V1
a1 <- (GeCr/h2.X)
a2 <- sqrt(h2.Z/h2.X -  a1^2)
Gamma1 <- a1 * Beta + a2* V1
Gamma1=Gamma1 * c(sqrt(h2.Z)/sqrt(t(Gamma1)%*%SIGMA%*%Gamma1))
sigma2.eps.Z =1 - h2.Z
print(m)
result <- vector()
result2 <- vector()
result3 <- vector()
result4 <- vector()
result5 <- vector()
result6 <- vector()
MaxVec <- vector()
MinVec <- vector()
Mean1 <- vector()
Mean2 <- vector()
SD <- vector()
SD2 <- vector()
TrueValue <- vector()
T.rho =  GeCr
T.tau.beta =  h2.X
T.tau.gamma =  h2.Z
Sigma = rho^abs(outer(1:m, 1:m, "-")) #correlation matrix
ev <- eigen(Sigma)$values
M <- max(ev)
mi <- min(ev)
eta <- 2/(M +mi)
Beta.mg = Sigma%*% sqrt(diag(1:m)) %*% Beta
Gamma.mg = Sigma%*% sqrt(diag(1:m)) %*% Gamma1
I = diag(rep(1,m))
rm(ev)
t(Beta)%*%SIGMA%*%Beta
t(Beta.mg)%*%Sigma%*%Beta.mg
t(Beta.mg)%*% solve( Sigma) %*%Beta.mg
sqrt((t(Beta) %*% SIGMA %*% SIGMA %*% Beta)^2 * (t(Beta) %*% Beta) / (t(Beta) %*% SIGMA %*% SIGMA %*% SIGMA %*% Beta))
sqrt((t(Beta.mg) %*% Sigma %*% Sigma %*% Beta.mg)^2 * (t(Beta.mg) %*% Beta.mg) / (t(Beta.mg) %*% Sigma %*% Sigma %*% Sigma %*% Beta.mg))
sqrt((t(Beta.mg) %*% Beta.mg)^2 * (t(Beta.mg) %*% solve(Sigma) %*% solve(Sigma) %*% Beta.mg) / (t(Beta.mg) %*% Sigma %*% Beta.mg))
(t(Beta.mg) %*% Gamma.mg)/sqrt(t(Beta.mg) %*% Beta.mg * t(Gamma.mg) %*% Gamma.mg)
rho = 0.9999
if(!X.norm){ #if X is binomial,
p=0.1;q=1-p; #binomial success and failure rates, could be other values;
rep.num=10; #for obtaining covariance matrix;
}
if(b.dist==2){ #if beta is mixed
null.b.prop=0.9; #90% of beta are 0, the other 10% beta are from N(0,1)
}
bsigma = fdiag(mat, m/2)
Beta = t(rmvnorm(1,mean = rep(0,m), sigma = as.matrix(bsigma)))
SIGMA <- Sigma1(m,rho)
Beta = Beta * c(sqrt(h2.X)/sqrt(t(Beta)%*%SIGMA%*%Beta))
sigma2.eps.X =1 - h2.X
U <- SIGMA %*% Beta
temp <- c(round(rnorm(P - P/2,0,1),2))
Z = -t(temp)%*%U[1:(P/2)]/(P/2)
V1 <- c(temp, Z/U[(P/2 + 1):length(U)])
V1 = V1*sqrt(h2.X)/sqrt(t(V1)%*%SIGMA%*%V1) # normalize V1
a1 <- (GeCr/h2.X)
a2 <- sqrt(h2.Z/h2.X -  a1^2)
Gamma1 <- a1 * Beta + a2* V1
Gamma1=Gamma1 * c(sqrt(h2.Z)/sqrt(t(Gamma1)%*%SIGMA%*%Gamma1))
sigma2.eps.Z =1 - h2.Z
print(m)
result <- vector()
result2 <- vector()
result3 <- vector()
result4 <- vector()
result5 <- vector()
result6 <- vector()
MaxVec <- vector()
MinVec <- vector()
Mean1 <- vector()
Mean2 <- vector()
SD <- vector()
SD2 <- vector()
TrueValue <- vector()
T.rho =  GeCr
T.tau.beta =  h2.X
T.tau.gamma =  h2.Z
Sigma = rho^abs(outer(1:m, 1:m, "-")) #correlation matrix
ev <- eigen(Sigma)$values
M <- max(ev)
mi <- min(ev)
eta <- 2/(M +mi)
Beta.mg = Sigma%*% sqrt(diag(1:m)) %*% Beta
Gamma.mg = Sigma%*% sqrt(diag(1:m)) %*% Gamma1
I = diag(rep(1,m))
rm(ev)
Mat <- I + I - eta* Sigma + (I - eta* Sigma)%*%(I - eta* Sigma)
(t(Beta.mg) %*% Gamma.mg)/sqrt(t(Beta.mg) %*% Beta.mg * t(Gamma.mg) %*% Gamma.mg)
Beta = t(rmvnorm(1,mean = rep(0,m), sigma = as.matrix(bsigma)))
SIGMA <- Sigma1(m,0.9)
U <- SIGMA %*% Beta
temp <- c(round(rnorm(P - P/2,0,1),2))
Z = -t(temp)%*%U[1:(P/2)]/(P/2)
V1 <- c(temp, Z/U[(P/2 + 1):length(U)])
V1 = V1*sqrt(h2.X)/sqrt(t(V1)%*%SIGMA%*%V1) # normalize V1
a1 <- (GeCr/h2.X)
a2 <- sqrt(h2.Z/h2.X -  a1^2)
Gamma1 <- a1 * Beta + a2* V1
Gamma1=Gamma1 * c(sqrt(h2.Z)/sqrt(t(Gamma1)%*%SIGMA%*%Gamma1))
sigma2.eps.Z =1 - h2.Z
print(m)
Sigma = 0.9^abs(outer(1:m, 1:m, "-")) #correlation matrix
Beta.mg = Sigma%*% sqrt(diag(1:m)) %*% Beta
Gamma.mg = Sigma%*% sqrt(diag(1:m)) %*% Gamma1
(t(Beta.mg) %*% Gamma.mg)/sqrt(t(Beta.mg) %*% Beta.mg * t(Gamma.mg) %*% Gamma.mg)
GeCr/sqrt(h2.X 8 h2.Z)
GeCr/sqrt(h2.X * h2.Z)
source('P:/CoheritabilitySimulation6.29/TestOrthogonal.R')
((t(Beta) %*% SIGMA %*% SIGMA %*% Gamma1)/sqrt(t(Beta)%*% SIGMA %*% SIGMA %*%  Beta *
t(Gamma1) %*% SIGMA %*% SIGMA %*%  Gamma1))
source('P:/CoheritabilitySimulation6.29/TestOrthogonal.R')
((t(Beta) %*% SIGMA %*% SIGMA %*% Gamma1)/sqrt(t(Beta)%*% SIGMA %*% SIGMA %*%  Beta *
t(Gamma1) %*% SIGMA %*% SIGMA %*%  Gamma1))
source('P:/CoheritabilitySimulation6.29/TestOrthogonal.R')
source('P:/CoheritabilitySimulation6.29/TestOrthogonal.R')
source('P:/CoheritabilitySimulation6.29/TestOrthogonal.R')
source('P:/CoheritabilitySimulation6.29/TestOrthogonal.R')
source('P:/CoheritabilitySimulation6.29/TestOrthogonal.R')
source('P:/CoheritabilitySimulation6.29/TestOrthogonal.R')
source('P:/CoheritabilitySimulation6.29/TestOrthogonal.R')
source('P:/CoheritabilitySimulation6.29/TestOrthogonal.R')
t(Beta)  %*% SIGMA %*% Beta
print(
(t(Beta)  %*% SIGMA  %*% SIGMA %*% Beta)^2 * t(Beta) %*% Beta/t(Beta) %*% SIGMA %*% SIGMA  %*% SIGMA %*% Beta
)
print(
sqrt((t(Beta)  %*% SIGMA  %*% SIGMA %*% Beta)^2 * t(Beta) %*% Beta/t(Beta) %*% SIGMA %*% SIGMA  %*% SIGMA %*% Beta
)
)
source('P:/CoheritabilitySimulation6.29/TestOrthogonal.R')
source('P:/CoheritabilitySimulation6.29/TestOrthogonal.R')
source('P:/CoheritabilitySimulation6.29/TestOrthogonal.R')
cor(Beta,Sigma)
hist(cor(Beta,Sigma))
mean(cor(Beta,Sigma)^2)
p
m
source('P:/CoheritabilitySimulation6.29/TestOrthogonal.R')
mean(cor(Beta,Sigma)^2)
source('P:/CoheritabilitySimulation6.29/TestOrthogonal.R')
mean(cor(Beta,Sigma)^2)
library(CovTools)
CovTools::CovEst.hard
library(FinCovRegularization)
FinCovRegularization::hard.thresholding()
FinCovRegularization::hard.thresholding
FinCovRegularization::soft.thresholding
setwd("P:/GeCr/R")
setwd("P:/GeCr")
load("Experiment2.Rdata")
load("Experiment2.Rdata")
list.all.1 = list.all
load("Experiment2test.Rdata")
for(i in 1:20){
for( j in 1:200){
list.all.1[[i]][[j]]$Identity =  list.all[[i]][[j]]$Identity
}
}
list.all = list.all.1
save(list.all, file = "Experiment2.Rdata")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=12, fig.height=8)
h2.X = 0.4
h2.Z = 0.4
load("Experiment2.Rdata")
Result.all = data.frame()
for(alternative1 in c(1,2)){
for(rho in c( 0.4, 0.8)){
for(GeCovaraince in c(-0.8, -0.4, 0, 0.4, 0.8 )){
X.norm = TRUE
#for(rho in c(0, 0.4, 0.6, 0.8)){
h2.X = 0.8
h2.Z = 0.8
R = GeCovaraince/(sqrt(h2.X)*sqrt(h2.Z))
name = paste0("Xnorm",X.norm,"rho",rho, "GeCv", GeCovaraince, "alternative1", alternative1)
H = list.all[[name]]
H = lapply(H, function(x){
res = as.data.frame(do.call(rbind,x))
res$group = rownames(res)
return(res)
} )
H <- as.data.frame(do.call(rbind, H))
H$rho = rho
H$normal = X.norm
H$TruePara = R
H$alternative = alternative1
Result.all = rbind(Result.all, H)
}
}
}
View(Result.all)
View(list.all)
View(Result.all)
Data.Plot.2 = Data.Plot %>%
group_by(group, rho, TruePara) %>%
summarise("Empirical S.E." = sd(EsMean), "Estimated S.E." = mean(EsSD))  %>% reshape2::melt( id = c("group","rho", "TruePara")) %>%  dplyr::mutate( group = paste(group,variable, sep = " "  ) )
View(Result.all)
Result.all[Result.all$alternative == 1 & Result.all$rho == 0.4 ,]
Result.all[Result.all$alternative == 1 & Result.all$rho == 0.4 & alternative1 == 1 ,]
Result.all[Result.all$alternative == 1 & Result.all$rho == 0.4 & alternative == 1 ,]
Result.all[Result.all$alternative == 1 & Result.all$rho == 0.4 & Result$alternative == 1 ,]
Result.all[Result.all$alternative == 1 & Result.all$rho == 0.4 & Result.all$alternative == 1 ,]
Result.all[Result.all$alternative == 1 & Result.all$rho == 0.4 & Result.all$alternative == 1 & Result.all$group == "LDSC.NO.Weight" ,]
Z = Result.all[Result.all$alternative == 1 & Result.all$rho == 0.4 & Result.all$alternative == 1 & Result.all$group == "LDSC.NO.Weight" ,]
View(Z)
Z = Result.all[Result.all$alternative == 1 & Result.all$rho == 0.4 & Result.all$alternative == 1 & Result.all$group == "LDSC.NO.Weight" & Result.all$TruePara == 0  ,]
View(Z)
Trim(x, trim = 0.1, na.rm = FALSE)
Trim(x, trim = 0.1, na.rm = FALSE)
mean
getAnywhere(mean)
UseMethod("mean")
Methods("mean")
Method("mean")
methods("mean")
methods("mean.default")
methods(mean.default)
methods(mean)
??mean
Z
View(Z)
load("Experiment2.Rdata")
alternative1 = 1
Result.all = data.frame()
for(rho in c( 0.4, 0.8)){
for(GeCovaraince in c(-0.8, -0.4, 0, 0.4, 0.8 )){
X.norm = TRUE
#for(rho in c(0, 0.4, 0.6, 0.8)){
h2.X = 0.8
h2.Z = 0.8
R = GeCovaraince/(sqrt(h2.X)*sqrt(h2.Z))
name = paste0("Xnorm",X.norm,"rho",rho, "GeCv", GeCovaraince, "alternative1", alternative1)
H = list.all[[name]]
H = lapply(H, function(x){
res = as.data.frame(do.call(rbind,x))
res$group = rownames(res)
return(res)
} )
H <- as.data.frame(do.call(rbind, H))
H$rho = rho
H$normal = X.norm
H$TruePara = R
Result.all = rbind(Result.all, H)
}
}
View(Result.all)
Data.Plot.2
load("P:/GeCr/Experiment4.Rdata")
View(list.all)
load("P:/GeCr/Experiment4.Rdata")
View(list.all)
debugSource('P:/GeCr/R/Simulation_Experiment4.R', echo=TRUE)
setwd("P:/GeCr/R")
debugSource('P:/GeCr/R/Simulation_Experiment4.R', echo=TRUE)
h2.beta.A.2
self$h2.beta.A.2
self$h2.beta.A.2
self$h2.beta.est
self$Fnorm
(t(self$Beta_mg) %*% Sigma %*% (self$Beta_mg) - self$Fnorm^2/ self$N1)
debugSource('P:/GeCr/R/Simulation_Experiment4.R', echo=TRUE)
self$h2.beta.A.2
t(self$Beta_mg) %*% Sigma %*% (self$Beta_mg)
self$Fnorm^2/ self$N1
(t(self$Beta_mg) %*% Omega %*% (self$Beta_mg) - self$Tr/ self$N1)
Q.beta
t(self$Beta_mg) %*% Omega %*% (self$Beta_mg)
self$Tr/self$N1^2
self$Tr/self$N1
load("P:/GeCr/Experiment4.Rdata")
View(list.all)
list.all[["XnormTRUErho0GeCv-0.8n100"]][[200]][["Proposed"]]
list.all[["XnormTRUErho0.8GeCv0.4n400"]][[1]]
load("P:/GeCr/Experiment3.Rdata")
View(list.all)
list.all[["XnormTRUErho0.4GeCv-0.8alternative3"]][[1]][["Proposed"]]
View(list.all)
View(list.all)
load("P:/GeCr/Experiment3.Rdata")
View(list.all)
source('P:/GeCr/R/Simulation_Experiment3.R', echo=TRUE)
source('P:/GeCr/R/Simulation_Experiment3.R', echo=TRUE)
source('P:/GeCr/R/Simulation_Experiment3.R', echo=TRUE)
source('P:/GeCr/R/Simulation_Experiment3.R', echo=TRUE)
source('P:/GeCr/R/Simulation_Experiment3.R', echo=TRUE)
source('P:/GeCr/R/Simulation_Experiment3.R', echo=TRUE)
source('P:/GeCr/R/Simulation_Experiment3.R', echo=TRUE)
source('P:/GeCr/R/Simulation_Experiment3.R', echo=TRUE)
source('P:/GeCr/R/Simulation_Experiment3.R', echo=TRUE)
source('P:/GeCr/R/Simulation_Experiment3.R', echo=TRUE)
source('P:/GeCr/R/Simulation_Experiment3.R', echo=TRUE)
source('P:/GeCr/R/Simulation_Experiment3.R', echo=TRUE)
source('P:/GeCr/R/Simulation_Experiment3.R', echo=TRUE)
source('P:/GeCr/R/Simulation_Experiment3.R', echo=TRUE)
source('P:/GeCr/R/Simulation_Experiment3.R', echo=TRUE)
source('P:/GeCr/R/Simulation_Experiment3.R', echo=TRUE)
source('P:/GeCr/R/Simulation_Experiment3.R', echo=TRUE)
